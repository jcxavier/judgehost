// Generated by Bisonc++ V2.4.2 on Sun Mar 22 22:57:14 2009 +0100

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "parserbase.h"
// $insert scanner.h
#include "scanner.h"

#include "parsetype.h"

#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;

    public:
        Parser(): d_scanner(&d_loc__, &d_val__) {}
        Parser(std::istream& in): d_scanner(&d_loc__, &d_val__,&in) {}

        int parse();

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner.
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
};

inline void Parser::error(char const *msg)
{
    std::cerr << msg << " on line " << d_scanner.lineno() << std::endl;
}

// $insert lex
inline int Parser::lex()
{
	int res = d_scanner.yylex();
	d_val__ = STYPE__(d_scanner.YYText());
	return res;
}

inline void Parser::print()      // use d_token, d_loc
{}


#endif
